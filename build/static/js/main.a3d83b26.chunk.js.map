{"version":3,"sources":["view.js","MovieTiles.js","MyMovies.js","OmdbTitle.js","MyMovieDetail.js","Search.js","SearchDetail.js","App.js","serviceWorker.js","index.js"],"names":["view","search","searchDetail","myMovies","myMovieDetail","MovieTiles","props","app","targetView","movies","handleClick","imdbID","a","url","axios","get","response","setState","currentView","data","console","log","className","map","m","poster","Poster","Type","label","Title","Year","key","onClick","e","title","alt","src","MyMovies","content","state","form","myMoviesForm","handleChange","preventDefault","alert","fetchMyMovies","length","name","value","sort","onChange","type","checked","watched","rating","OmdbTitle","omdbTitle","Rated","Released","Runtime","Genre","Director","Writer","Actors","Plot","Language","Country","Awards","Ratings","r","Source","Value","Metascore","imdbRating","imdbVotes","MyMovieDetail","myMovie","myMovieDetailForm","removeMovie","delete","href","Comments","c","TimeStamp","comment","Search","searchForm","results","searchResults","updateForm","performSearch","searchText","trim","year","params","Response","target","SearchDetail","addMovie","body","post","App","clickMyMovies","bind","clickSearch","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a3d83b26.chunk.js","sourcesContent":["const view = {\r\n  search: 'search',\r\n  searchDetail: 'searchDetail',\r\n  myMovies: 'myMovies',\r\n  myMovieDetail: 'myMovieDetail',\r\n};\r\n\r\nexport default view;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport view from './view';\r\nimport './MovieTiles.css';\r\n\r\nfunction MovieTiles(props) {\r\n  const app = props.app;\r\n  const targetView = props.targetView;\r\n  const movies = props.movies;\r\n\r\n  const handleClick = async (imdbID) => {\r\n    if (targetView === view.searchDetail) {\r\n      const url = `/api/omdb/${imdbID}`;\r\n      const response = await axios.get(url);\r\n      return app.setState({\r\n        currentView: targetView,\r\n        searchDetail: response.data,\r\n      })\r\n    }\r\n    else {\r\n      const url = `/api/myMovieList/${imdbID}`;\r\n      const response = await axios.get(url);\r\n      console.log(url, response.data);\r\n      return app.setState({\r\n        currentView: targetView,\r\n        myMovieDetail: response.data,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ul className=\"MovieTiles\">\r\n    {movies.map(m => {\r\n      let poster = m.Poster;\r\n      if (poster === 'N/A') {\r\n        if (m.Type === 'series') {\r\n          poster = '/icon_series.jpg';\r\n        }\r\n        else if (m.Type === 'episode') {\r\n          poster = '/icon_episode.jpg';\r\n        }\r\n        else {\r\n          poster = '/icon_movie.jpg';\r\n        }\r\n      }\r\n      const label = `${m.Title} (${m.Year}) [${m.Type}]`;\r\n      return (\r\n        <li key={m.imdbID} onClick={(e) => handleClick(m.imdbID)}>\r\n          <img title={label} alt={label} src={poster} /><br />\r\n          {label}\r\n        </li>\r\n      );\r\n    })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default MovieTiles;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport MovieTiles from './MovieTiles';\r\nimport view from './view';\r\nimport './button.css';\r\n\r\nfunction MyMovies(props) {\r\n  const app = props.app;\r\n  const state = app.state;\r\n  const form = state.myMoviesForm;\r\n  const movies = state.myMovies;\r\n\r\n  const handleChange = async(e) => {\r\n    e.preventDefault();\r\n    alert('TODO: implement this functionality.');\r\n  };\r\n\r\n  const fetchMyMovies = async() => {\r\n    const url = '/api/myMovieList';\r\n    const response = await axios.get(url);\r\n    // TODO: handle error conditions.\r\n    app.setState({\r\n      myMovies: response.data,\r\n    });\r\n  };\r\n\r\n  let content;\r\n  if (movies === null) {\r\n    content = '';\r\n    fetchMyMovies();\r\n  }\r\n  else if (movies.length === 0) {\r\n    content = <h2>you haven't saved any videos!</h2>;\r\n  }\r\n  else {\r\n    content = (\r\n      <MovieTiles\r\n        app={app}\r\n        targetView={view.myMovieDetail}\r\n        movies={movies}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"MyMovies\">\r\n      <form>\r\n        sort by:\r\n        <select name=\"sort\"\r\n                value={form.sort}\r\n                onChange={handleChange}>\r\n          <option value=\"\"></option>\r\n          <option value=\"title asc\">title asc</option>\r\n          <option value=\"title desc\">title desc</option>\r\n          <option value=\"year asc\">year asc</option>\r\n          <option value=\"year desc\">year desc</option>\r\n        </select>&nbsp;&nbsp;\r\n        watched:\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"watched\"\r\n          checked={form.watched}\r\n          onChange={handleChange}\r\n        />&nbsp;&nbsp;\r\n        rating:\r\n        <select name=\"rating\"\r\n                value={form.rating}\r\n                onChange={handleChange}>\r\n          <option value=\"\"></option>\r\n          <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n          <option value=\"7\">7</option>\r\n          <option value=\"8\">8</option>\r\n          <option value=\"9\">9</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"+2\">+2</option>\r\n          <option value=\"+3\">+3</option>\r\n          <option value=\"+4\">+4</option>\r\n          <option value=\"+5\">+5</option>\r\n          <option value=\"+6\">+6</option>\r\n          <option value=\"+7\">+7</option>\r\n          <option value=\"+8\">+8</option>\r\n          <option value=\"+9\">+9</option>\r\n          <option value=\"-2\">-2</option>\r\n          <option value=\"-3\">-3</option>\r\n          <option value=\"-4\">-4</option>\r\n          <option value=\"-5\">-5</option>\r\n          <option value=\"-6\">-6</option>\r\n          <option value=\"-7\">-7</option>\r\n          <option value=\"-8\">-8</option>\r\n          <option value=\"-9\">-9</option>\r\n        </select>&nbsp;\r\n      </form>\r\n      {content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyMovies;\r\n","import React from 'react';\r\nimport './table.css';\r\n\r\nfunction OmdbTitle(props) {\r\n  const omdbTitle = props.omdbTitle;\r\n  let poster = omdbTitle.Poster;\r\n  if (poster === 'N/A') {\r\n    if (omdbTitle.Type === 'series') {\r\n      poster = '/icon_series.jpg';\r\n    }\r\n    else if (omdbTitle.Type === 'episode') {\r\n      poster = '/icon_episode.jpg';\r\n    }\r\n    else {\r\n      poster = '/icon_movie.jpg';\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"OmdbTitle\">\r\n      <div><img src={poster} alt={omdbTitle.Title} /></div>\r\n      <table className=\"paleBlueRows\">\r\n      <tbody>\r\n      <tr>\r\n        <th>Title</th>\r\n        <td>{omdbTitle.Title}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Year</th>\r\n        <td>{omdbTitle.Year}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Rated</th>\r\n        <td>{omdbTitle.Rated}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Released</th>\r\n        <td>{omdbTitle.Released}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Runtime</th>\r\n        <td>{omdbTitle.Runtime}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Genre</th>\r\n        <td>{omdbTitle.Genre}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Director</th>\r\n        <td>{omdbTitle.Director}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Writer</th>\r\n        <td>{omdbTitle.Writer}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Actors</th>\r\n        <td>{omdbTitle.Actors}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Plot</th>\r\n        <td>{omdbTitle.Plot}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Language</th>\r\n        <td>{omdbTitle.Language}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Country</th>\r\n        <td>{omdbTitle.Country}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Awards</th>\r\n        <td>{omdbTitle.Awards}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Ratings</th>\r\n        <td>\r\n          <ul>\r\n          {omdbTitle.Ratings.map(r =>\r\n            <li key={r.Source}>{r.Value} ({r.Source})</li>\r\n          )}\r\n          </ul>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th>Metascore</th>\r\n        <td>{omdbTitle.Metascore}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>imdbRating</th>\r\n        <td>{omdbTitle.imdbRating}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>imdbVotes</th>\r\n        <td>{omdbTitle.imdbVotes}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>imdbID</th>\r\n        <td>{omdbTitle.imdbID}</td>\r\n      </tr>\r\n      <tr>\r\n        <th>Type</th>\r\n        <td>{omdbTitle.Type}</td>\r\n      </tr>\r\n      </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OmdbTitle;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport OmdbTitle from './OmdbTitle';\r\nimport view from './view';\r\n\r\nimport './MyMovieDetail.css';\r\nimport './button.css';\r\nimport './table.css';\r\n\r\nfunction MyMovieDetail(props) {\r\n  const app = props.app;\r\n  const state = app.state;\r\n  const myMovie = state.myMovieDetail;\r\n  const form = state.myMovieDetailForm;\r\n  const imdbID = myMovie.OmdbTitle.imdbID;\r\n\r\n  const removeMovie = async(e) => {\r\n    e.preventDefault();\r\n    console.log('MyMovieDetail.removeMovie:', imdbID);\r\n    const url = `/api/myMovieList/${imdbID}`;\r\n    await axios.delete(url);\r\n    app.setState({\r\n      myMovies: null,\r\n      currentView: view.myMovies,\r\n    });\r\n  }\r\n\r\n  const handleChange = async(e) => {\r\n    e.preventDefault();\r\n    alert('TODO: implement this feature.');\r\n  }\r\n\r\n  const handleClick = async(e) => {\r\n    e.preventDefault();\r\n    alert('TODO: implement this feature.');\r\n  }\r\n\r\n  return (\r\n    <div className=\"MyMovieDetail\">\r\n      <OmdbTitle omdbTitle={myMovie.OmdbTitle} />\r\n      <hr />\r\n      <table className=\"paleBlueRows\">\r\n      <tbody>\r\n      <tr>\r\n        <th>Watched</th>\r\n        <td>\r\n          <input type=\"checkbox\" checked={form.watched} onChange={handleChange} />\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th>My Rating</th>\r\n        <td>\r\n          <input type=\"text\" value={form.rating} onChange={handleChange} />\r\n          <a href=\"\" className=\"button\" onClick={handleClick}>\r\n            submit\r\n          </a>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th>Comments</th>\r\n        <td>\r\n          <ul>\r\n          {myMovie.Comments.map(c =>\r\n            <li key={c.TimeStamp}>[c.TimeStamp]: c.Text</li>\r\n          )}\r\n          </ul>\r\n          <input type=\"text\" value={form.comment} onChange={handleChange}/>&nbsp;\r\n          <a href=\"\" className=\"button\" onClick={handleClick}>\r\n            submit\r\n          </a>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n      </table>\r\n\r\n      <a href=\"\" className=\"buttonRed\" onClick={removeMovie}>\r\n        Remove from My Movies!\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyMovieDetail;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport MovieTiles from './MovieTiles';\r\nimport view from './view';\r\nimport './button.css';\r\n\r\nfunction Search(props) {\r\n  const app = props.app;\r\n  const state = app.state;\r\n  const form = state.searchForm;\r\n  const results = state.searchResults;\r\n\r\n  const updateForm = (key, value) => {\r\n    form[key] = value;\r\n    app.setState({\r\n      searchForm: form,\r\n    });\r\n  };\r\n\r\n  const performSearch = async(e) => {\r\n    e.preventDefault();\r\n    if (form.searchText.trim() === '') {\r\n      return alert('please enter search text');\r\n    }\r\n    const searchText = form.searchText;\r\n    const type = form.type;\r\n    const year = form.year;\r\n    const url = '/api/omdb';\r\n    const params = { searchText, type, year };\r\n    const response = await axios.get(url, { params });\r\n    const results = response.data.Response === 'True' ? response.data.Search: [];\r\n    app.setState({\r\n      searchResults: results,\r\n    });\r\n  };\r\n\r\n  let content;\r\n  if (results === null) {\r\n    content = '';\r\n  }\r\n  else if (results.length === 0) {\r\n    content = <h2>no videos found, man!</h2>;\r\n  }\r\n  else {\r\n    content = (\r\n      <MovieTiles\r\n        app={app}\r\n        targetView={view.searchDetail}\r\n        movies={results}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"Search\">\r\n      <form>\r\n        search:&nbsp;\r\n        <input\r\n          type=\"text\"\r\n          name=\"search\"\r\n          value={form.searchText}\r\n          onChange={e => updateForm('searchText', e.target.value) }\r\n        />&nbsp;\r\n        type:&nbsp;\r\n        <select\r\n          name=\"type\"\r\n          value={form.type}\r\n          onChange={e => updateForm('type', e.target.value) }\r\n        >\r\n          <option value=\"\"></option>\r\n          <option value=\"movie\">movie</option>\r\n          <option value=\"series\">series</option>\r\n          <option value=\"episode\">episode</option>\r\n        </select>&nbsp;\r\n        year:&nbsp;\r\n        <input\r\n          type=\"text\"\r\n          name=\"year\"\r\n          value={form.year}\r\n          onChange={e => updateForm('year', e.target.value) }\r\n        />&nbsp;&nbsp;\r\n        <a href=\"\" className=\"button\" onClick={performSearch}>\r\n          search OMDB &gt;\r\n        </a>\r\n      </form>\r\n      {content}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport OmdbTitle from './OmdbTitle';\r\nimport view from './view';\r\nimport './button.css';\r\nimport './SearchDetail.css';\r\n\r\nfunction SearchDetail(props) {\r\n  const app = props.app;\r\n  const state = app.state;\r\n  const imdbID = state.searchDetail.imdbID;\r\n\r\n  const addMovie = async(e) => {\r\n    e.preventDefault();\r\n    console.log('SearchDetail.addMovie:', imdbID);\r\n    let url = '/api/myMovieList';\r\n    const body = { imdbID };\r\n    // Save move to myMovieList\r\n    let response = await axios.post(url, body);\r\n    // TODO: handle possible errors.\r\n    console.log(response);\r\n    // Fetch saved movie from myMovieList and switch view to myMovieDetail.\r\n    url = `/api/myMovieList/${imdbID}`;\r\n    response = await axios.get(url);\r\n    console.log(response);\r\n    // TODO: handle possible errors.\r\n    app.setState({\r\n      myMovieDetail: response.data,\r\n      currentView: view.myMovieDetail,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"SearchDetail\">\r\n      <OmdbTitle omdbTitle={state.searchDetail} />\r\n      <a href=\"\" className=\"button\" onClick={addMovie}>\r\n        Add to My Movies!\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchDetail;\r\n","import React from 'react';\r\n\r\nimport MyMovies from './MyMovies';\r\nimport MyMovieDetail from './MyMovieDetail';\r\nimport Search from './Search';\r\nimport SearchDetail from './SearchDetail';\r\nimport view from './view';\r\n\r\nimport './App.css';\r\nimport './tabs.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.clickMyMovies = this.clickMyMovies.bind(this);\r\n    this.clickSearch = this.clickSearch.bind(this);\r\n\r\n    // Initial state\r\n    this.state = {\r\n      currentView: view.search,\r\n      searchForm: {\r\n        searchText: '',\r\n        type: '',\r\n        year: '',\r\n      },\r\n      searchResults: null,\r\n      searchDetail: null,\r\n      myMoviesForm: {\r\n        sort: '',\r\n        watched: '',\r\n        rating: '',\r\n      },\r\n      myMovies: null,\r\n      myMovieDetail: null,\r\n      myMovieDetailForm: {\r\n        comment: '',\r\n        rating: '',\r\n        watched: false,\r\n      },\r\n    };\r\n  }\r\n\r\n  clickMyMovies() {\r\n    this.setState({\r\n      myMovies: null, // Forces a refresh in MyMovies\r\n      currentView: view.myMovies,\r\n    });\r\n  }\r\n\r\n  clickSearch() {\r\n    this.setState({\r\n      currentView: view.search,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const currentView = this.state.currentView;\r\n    let content;\r\n    if (currentView === view.search) {\r\n      content = <Search app={this} />\r\n    }\r\n    else if (currentView === view.searchDetail) {\r\n      content = <SearchDetail app={this} />\r\n    }\r\n    else if (currentView === view.myMovies) {\r\n      content = <MyMovies app={this} />\r\n    }\r\n    else if (currentView === view.myMovieDetail) {\r\n      content = <MyMovieDetail app={this} />\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>\r\n          <img className=\"logo\" alt=\"Autodesk\" src=\"/Autodesk_logo_193x32.png\" />\r\n          &nbsp;Code Challenge\r\n        </h1>\r\n        <div className=\"tabbed round\">\r\n          <ul>\r\n            <li key={view.myMovies}\r\n              className={this.state.currentView === view.myMovies ? 'active' : ''}\r\n              onClick={this.clickMyMovies}\r\n            >My Movies</li>\r\n            <li key={view.search}\r\n              className={this.state.currentView === view.search ? 'active' : ''}\r\n              onClick={this.clickSearch}\r\n            >Search</li>\r\n          </ul>\r\n        </div>\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}